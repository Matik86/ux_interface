import { ethers } from 'ethers';
import { parseUnits } from "ethers";
import { Client } from './client.js';
import { TOKEN_ADDRESS } from './config.js';


export class MintToken {
    constructor(client) {
        this.client = client;
        this.address = client.address;
        this.contract = client.getTokenContract(TOKEN_ADDRESS);
    }

    // Mint —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    async mintToken(amount) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º nonce –¥–ª—è –º–∏–Ω—Ç–∞
            const nonce = await this.contract.nonces(this.address);

            // –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –æ—Ç –∞–¥–º–∏–Ω–∞
            const signature = await this.client.getMintTokenSignature(
                TOKEN_ADDRESS,
                amount
            );          

            const txParams = await this.client.prepareTransaction();

            const txUnsigned = await this.contract.mintWithSignature.populateTransaction(
                amount,
                nonce,
                Number(0),
                signature
            );
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const transaction = { ...txParams, ...txUnsigned };

            // –õ–æ–≥
            const tokenName = await this.contract.name();
            const humanAmount = Number(amount / 10n ** 18n)
            console.log(`${this.address} is mintingüì• ${humanAmount} $${tokenName} ...`);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const txData = await this.client.sendTx({ transaction });
            return await this.client.verifyTx(txData);

        } catch (err) {
            console.error(`error during mint tokens: ${err}`);
            return false;
        }
    }

    // burn —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    async burnToken(amount) {
        try {
            const txParams = await this.client.prepareTransaction();

            const txUnsigned = await this.contract.burn.populateTransaction(
                amount,
            );
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const transaction = { ...txParams, ...txUnsigned };

            // –õ–æ–≥
            const tokenName = await this.contract.name();
            const humanAmount = Number(amount / 10n ** 18n)
            console.log(`${this.address} is burningüî• ${humanAmount} $${tokenName} ...`);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const txData = await this.client.sendTx({ transaction });
            return await this.client.verifyTx(txData);

        } catch (err) {
            console.error(`error during burn tokens: ${err}`);
            return false;
        }
    }

}
